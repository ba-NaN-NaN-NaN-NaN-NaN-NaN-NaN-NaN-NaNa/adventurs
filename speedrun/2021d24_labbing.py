


print(" --- Into chunk 13 from chunk 12 ---")



valid_output_pairs_12 = [(6, 1), (7, 2), (8, 3), (9, 4), (10, 5), (11, 6), (12, 7), (13, 8), (14, 9)]

unique_firsts = [x[0] for x in valid_output_pairs_12]
unique_firsts = sorted(list(set(unique_firsts)))
print("From chunk 12, we can have following possible z_in: %s" % unique_firsts)

unique_firsts = [int(x[0]/26) for x in valid_output_pairs_12]
unique_firsts = sorted(list(set(unique_firsts)))
print("From chunk 12, we can have following possible z_in / 26: %s" % unique_firsts)

unique_firsts = [x[0] % 26 for x in valid_output_pairs_12]
unique_firsts = sorted(list(set(unique_firsts)))
print("From chunk 12, we can have following possible z_in %% 26: %s" % unique_firsts)

largest_from_12 = 0
for val, _ in valid_output_pairs_12:
    if val > largest_from_12:
        largest_from_12 = val

print("Largest number from 12 into 13 is %d" % largest_from_12)


print(" --- Into chunk 12 from chunk 11 ---")

valid_output_pairs_11 = [(161, 1), (162, 2), (163, 3), (164, 4), (165, 5), (166, 6), (167, 7), (168, 8), (169, 9), (187, 1), (188, 2), (189, 3), (190, 4), (191, 5), (192, 6), (193, 7), (194, 8), (195, 9), (213, 1), (214, 2), (215, 3), (216, 4), (217, 5), (218, 6), (219, 7), (220, 8), (221, 9), (239, 1), (240, 2), (241, 3), (242, 4), (243, 5), (244, 6), (245, 7), (246, 8), (247, 9), (265, 1), (266, 2), (267, 3), (268, 4), (269, 5), (270, 6), (271, 7), (272, 8), (273, 9), (291, 1), (292, 2), (293, 3), (294, 4), (295, 5), (296, 6), (297, 7), (298, 8), (299, 9), (317, 1), (318, 2), (319, 3), (320, 4), (321, 5), (322, 6), (323, 7), (324, 8), (325, 9), (343, 1), (344, 2), (345, 3), (346, 4), (347, 5), (348, 6), (349, 7), (350, 8), (351, 9), (369, 1), (370, 2), (371, 3), (372, 4), (373, 5), (374, 6), (375, 7), (376, 8), (377, 9)]

unique_firsts = [x[0] for x in valid_output_pairs_11]
unique_firsts = sorted(list(set(unique_firsts)))
print("From chunk 11, we can have following possible z_in: %s" % unique_firsts)


unique_firsts = [int(x[0]/26) for x in valid_output_pairs_11]
unique_firsts = sorted(list(set(unique_firsts)))
print("From chunk 11, we can have following possible z_in / 26: %s" % unique_firsts)

unique_firsts = [x[0] % 26 for x in valid_output_pairs_11]
unique_firsts = sorted(list(set(unique_firsts)))
print("From chunk 11, we can have following possible z_in %% 26: %s" % unique_firsts)


largest_from_11 = 0
for val, _ in valid_output_pairs_11:
    if val > largest_from_11:
        largest_from_11 = val

print("Largest number from 11 into 12 is %d" % largest_from_11)



print(" --- Into chunk 11 from chunk 10 ---")

valid_output_pairs_10 = [(156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1), (200, 1), (201, 1), (202, 1), (203, 1), (204, 1), (205, 1), (206, 1), (207, 1), (208, 1), (209, 1), (210, 1), (211, 1), (212, 1), (213, 1), (214, 1), (215, 1), (216, 1), (217, 1), (218, 1), (220, 1), (221, 1), (222, 1), (223, 1), (224, 1), (225, 1), (226, 1), (227, 1), (228, 1), (229, 1), (230, 1), (231, 1), (232, 1), (233, 1), (234, 1), (235, 1), (236, 1), (237, 1), (238, 1), (239, 1), (240, 1), (241, 1), (242, 1), (243, 1), (244, 1), (246, 1), (247, 1), (248, 1), (249, 1), (250, 1), (251, 1), (252, 1), (253, 1), (254, 1), (255, 1), (256, 1), (257, 1), (258, 1), (259, 1), (260, 1), (261, 1), (262, 1), (263, 1), (264, 1), (265, 1), (266, 1), (267, 1), (268, 1), (269, 1), (270, 1), (272, 1), (273, 1), (274, 1), (275, 1), (276, 1), (277, 1), (278, 1), (279, 1), (280, 1), (281, 1), (282, 1), (283, 1), (284, 1), (285, 1), (286, 1), (287, 1), (288, 1), (289, 1), (290, 1), (291, 1), (292, 1), (293, 1), (294, 1), (295, 1), (296, 1), (298, 1), (299, 1), (300, 1), (301, 1), (302, 1), (303, 1), (304, 1), (305, 1), (306, 1), (307, 1), (308, 1), (309, 1), (310, 1), (311, 1), (312, 1), (313, 1), (314, 1), (315, 1), (316, 1), (317, 1), (318, 1), (319, 1), (320, 1), (321, 1), (322, 1), (324, 1), (325, 1), (326, 1), (327, 1), (328, 1), (329, 1), (330, 1), (331, 1), (332, 1), (333, 1), (334, 1), (335, 1), (336, 1), (337, 1), (338, 1), (339, 1), (340, 1), (341, 1), (342, 1), (343, 1), (344, 1), (345, 1), (346, 1), (347, 1), (348, 1), (350, 1), (351, 1), (352, 1), (353, 1), (354, 1), (355, 1), (356, 1), (357, 1), (358, 1), (359, 1), (360, 1), (361, 1), (362, 1), (363, 1), (364, 1), (365, 1), (366, 1), (367, 1), (368, 1), (369, 1), (370, 1), (371, 1), (372, 1), (373, 1), (374, 1), (376, 1), (377, 1), (378, 1), (379, 1), (380, 1), (381, 1), (382, 1), (383, 1), (384, 1), (385, 1), (386, 1), (387, 1), (388, 1), (389, 1), (4197, 1), (4198, 2), (4199, 3), (4200, 4), (4201, 5), (4202, 6), (4203, 7), (4204, 8), (4205, 9), (4223, 1), (4224, 2), (4225, 3), (4226, 4), (4227, 5), (4228, 6), (4229, 7), (4230, 8), (4231, 9), (4249, 1), (4250, 2), (4251, 3), (4252, 4), (4253, 5), (4254, 6), (4255, 7), (4256, 8), (4257, 9), (4275, 1), (4276, 2), (4277, 3), (4278, 4), (4279, 5), (4280, 6), (4281, 7), (4282, 8), (4283, 9), (4301, 1), (4302, 2), (4303, 3), (4304, 4), (4305, 5), (4306, 6), (4307, 7), (4308, 8), (4309, 9), (4327, 1), (4328, 2), (4329, 3), (4330, 4), (4331, 5), (4332, 6), (4333, 7), (4334, 8), (4335, 9), (4353, 1), (4354, 2), (4355, 3), (4356, 4), (4357, 5), (4358, 6), (4359, 7), (4360, 8), (4361, 9), (4379, 1), (4380, 2), (4381, 3), (4382, 4), (4383, 5), (4384, 6), (4385, 7), (4386, 8), (4387, 9), (4405, 1), (4406, 2), (4407, 3), (4408, 4), (4409, 5), (4410, 6), (4411, 7), (4412, 8), (4413, 9), (4873, 1), (4874, 2), (4875, 3), (4876, 4), (4877, 5), (4878, 6), (4879, 7), (4880, 8), (4881, 9), (4899, 1), (4900, 2), (4901, 3), (4902, 4), (4903, 5), (4904, 6), (4905, 7), (4906, 8), (4907, 9), (4925, 1), (4926, 2), (4927, 3), (4928, 4), (4929, 5), (4930, 6), (4931, 7), (4932, 8), (4933, 9), (4951, 1), (4952, 2), (4953, 3), (4954, 4), (4955, 5), (4956, 6), (4957, 7), (4958, 8), (4959, 9), (4977, 1), (4978, 2), (4979, 3), (4980, 4), (4981, 5), (4982, 6), (4983, 7), (4984, 8), (4985, 9), (5003, 1), (5004, 2), (5005, 3), (5006, 4), (5007, 5), (5008, 6), (5009, 7), (5010, 8), (5011, 9), (5029, 1), (5030, 2), (5031, 3), (5032, 4), (5033, 5), (5034, 6), (5035, 7), (5036, 8), (5037, 9), (5055, 1), (5056, 2), (5057, 3), (5058, 4), (5059, 5), (5060, 6), (5061, 7), (5062, 8), (5063, 9), (5081, 1), (5082, 2), (5083, 3), (5084, 4), (5085, 5), (5086, 6), (5087, 7), (5088, 8), (5089, 9), (5549, 1), (5550, 2), (5551, 3), (5552, 4), (5553, 5), (5554, 6), (5555, 7), (5556, 8), (5557, 9), (5575, 1), (5576, 2), (5577, 3), (5578, 4), (5579, 5), (5580, 6), (5581, 7), (5582, 8), (5583, 9), (5601, 1), (5602, 2), (5603, 3), (5604, 4), (5605, 5), (5606, 6), (5607, 7), (5608, 8), (5609, 9), (5627, 1), (5628, 2), (5629, 3), (5630, 4), (5631, 5), (5632, 6), (5633, 7), (5634, 8), (5635, 9), (5653, 1), (5654, 2), (5655, 3), (5656, 4), (5657, 5), (5658, 6), (5659, 7), (5660, 8), (5661, 9), (5679, 1), (5680, 2), (5681, 3), (5682, 4), (5683, 5), (5684, 6), (5685, 7), (5686, 8), (5687, 9), (5705, 1), (5706, 2), (5707, 3), (5708, 4), (5709, 5), (5710, 6), (5711, 7), (5712, 8), (5713, 9), (5731, 1), (5732, 2), (5733, 3), (5734, 4), (5735, 5), (5736, 6), (5737, 7), (5738, 8), (5739, 9), (5757, 1), (5758, 2), (5759, 3), (5760, 4), (5761, 5), (5762, 6), (5763, 7), (5764, 8), (5765, 9), (6225, 1), (6226, 2), (6227, 3), (6228, 4), (6229, 5), (6230, 6), (6231, 7), (6232, 8), (6233, 9), (6251, 1), (6252, 2), (6253, 3), (6254, 4), (6255, 5), (6256, 6), (6257, 7), (6258, 8), (6259, 9), (6277, 1), (6278, 2), (6279, 3), (6280, 4), (6281, 5), (6282, 6), (6283, 7), (6284, 8), (6285, 9), (6303, 1), (6304, 2), (6305, 3), (6306, 4), (6307, 5), (6308, 6), (6309, 7), (6310, 8), (6311, 9), (6329, 1), (6330, 2), (6331, 3), (6332, 4), (6333, 5), (6334, 6), (6335, 7), (6336, 8), (6337, 9), (6355, 1), (6356, 2), (6357, 3), (6358, 4), (6359, 5), (6360, 6), (6361, 7), (6362, 8), (6363, 9), (6381, 1), (6382, 2), (6383, 3), (6384, 4), (6385, 5), (6386, 6), (6387, 7), (6388, 8), (6389, 9), (6407, 1), (6408, 2), (6409, 3), (6410, 4), (6411, 5), (6412, 6), (6413, 7), (6414, 8), (6415, 9), (6433, 1), (6434, 2), (6435, 3), (6436, 4), (6437, 5), (6438, 6), (6439, 7), (6440, 8), (6441, 9), (6901, 1), (6902, 2), (6903, 3), (6904, 4), (6905, 5), (6906, 6), (6907, 7), (6908, 8), (6909, 9), (6927, 1), (6928, 2), (6929, 3), (6930, 4), (6931, 5), (6932, 6), (6933, 7), (6934, 8), (6935, 9), (6953, 1), (6954, 2), (6955, 3), (6956, 4), (6957, 5), (6958, 6), (6959, 7), (6960, 8), (6961, 9), (6979, 1), (6980, 2), (6981, 3), (6982, 4), (6983, 5), (6984, 6), (6985, 7), (6986, 8), (6987, 9), (7005, 1), (7006, 2), (7007, 3), (7008, 4), (7009, 5), (7010, 6), (7011, 7), (7012, 8), (7013, 9), (7031, 1), (7032, 2), (7033, 3), (7034, 4), (7035, 5), (7036, 6), (7037, 7), (7038, 8), (7039, 9), (7057, 1), (7058, 2), (7059, 3), (7060, 4), (7061, 5), (7062, 6), (7063, 7), (7064, 8), (7065, 9), (7083, 1), (7084, 2), (7085, 3), (7086, 4), (7087, 5), (7088, 6), (7089, 7), (7090, 8), (7091, 9), (7109, 1), (7110, 2), (7111, 3), (7112, 4), (7113, 5), (7114, 6), (7115, 7), (7116, 8), (7117, 9), (7577, 1), (7578, 2), (7579, 3), (7580, 4), (7581, 5), (7582, 6), (7583, 7), (7584, 8), (7585, 9), (7603, 1), (7604, 2), (7605, 3), (7606, 4), (7607, 5), (7608, 6), (7609, 7), (7610, 8), (7611, 9), (7629, 1), (7630, 2), (7631, 3), (7632, 4), (7633, 5), (7634, 6), (7635, 7), (7636, 8), (7637, 9), (7655, 1), (7656, 2), (7657, 3), (7658, 4), (7659, 5), (7660, 6), (7661, 7), (7662, 8), (7663, 9), (7681, 1), (7682, 2), (7683, 3), (7684, 4), (7685, 5), (7686, 6), (7687, 7), (7688, 8), (7689, 9), (7707, 1), (7708, 2), (7709, 3), (7710, 4), (7711, 5), (7712, 6), (7713, 7), (7714, 8), (7715, 9), (7733, 1), (7734, 2), (7735, 3), (7736, 4), (7737, 5), (7738, 6), (7739, 7), (7740, 8), (7741, 9), (7759, 1), (7760, 2), (7761, 3), (7762, 4), (7763, 5), (7764, 6), (7765, 7), (7766, 8), (7767, 9), (7785, 1), (7786, 2), (7787, 3), (7788, 4), (7789, 5), (7790, 6), (7791, 7), (7792, 8), (7793, 9), (8253, 1), (8254, 2), (8255, 3), (8256, 4), (8257, 5), (8258, 6), (8259, 7), (8260, 8), (8261, 9), (8279, 1), (8280, 2), (8281, 3), (8282, 4), (8283, 5), (8284, 6), (8285, 7), (8286, 8), (8287, 9), (8305, 1), (8306, 2), (8307, 3), (8308, 4), (8309, 5), (8310, 6), (8311, 7), (8312, 8), (8313, 9), (8331, 1), (8332, 2), (8333, 3), (8334, 4), (8335, 5), (8336, 6), (8337, 7), (8338, 8), (8339, 9), (8357, 1), (8358, 2), (8359, 3), (8360, 4), (8361, 5), (8362, 6), (8363, 7), (8364, 8), (8365, 9), (8383, 1), (8384, 2), (8385, 3), (8386, 4), (8387, 5), (8388, 6), (8389, 7), (8390, 8), (8391, 9), (8409, 1), (8410, 2), (8411, 3), (8412, 4), (8413, 5), (8414, 6), (8415, 7), (8416, 8), (8417, 9), (8435, 1), (8436, 2), (8437, 3), (8438, 4), (8439, 5), (8440, 6), (8441, 7), (8442, 8), (8443, 9), (8461, 1), (8462, 2), (8463, 3), (8464, 4), (8465, 5), (8466, 6), (8467, 7), (8468, 8), (8469, 9), (8929, 1), (8930, 2), (8931, 3), (8932, 4), (8933, 5), (8934, 6), (8935, 7), (8936, 8), (8937, 9), (8955, 1), (8956, 2), (8957, 3), (8958, 4), (8959, 5), (8960, 6), (8961, 7), (8962, 8), (8963, 9), (8981, 1), (8982, 2), (8983, 3), (8984, 4), (8985, 5), (8986, 6), (8987, 7), (8988, 8), (8989, 9), (9007, 1), (9008, 2), (9009, 3), (9010, 4), (9011, 5), (9012, 6), (9013, 7), (9014, 8), (9015, 9), (9033, 1), (9034, 2), (9035, 3), (9036, 4), (9037, 5), (9038, 6), (9039, 7), (9040, 8), (9041, 9), (9059, 1), (9060, 2), (9061, 3), (9062, 4), (9063, 5), (9064, 6), (9065, 7), (9066, 8), (9067, 9), (9085, 1), (9086, 2), (9087, 3), (9088, 4), (9089, 5), (9090, 6), (9091, 7), (9092, 8), (9093, 9), (9111, 1), (9112, 2), (9113, 3), (9114, 4), (9115, 5), (9116, 6), (9117, 7), (9118, 8), (9119, 9), (9137, 1), (9138, 2), (9139, 3), (9140, 4), (9141, 5), (9142, 6), (9143, 7), (9144, 8), (9145, 9), (9605, 1), (9606, 2), (9607, 3), (9608, 4), (9609, 5), (9610, 6), (9611, 7), (9612, 8), (9613, 9), (9631, 1), (9632, 2), (9633, 3), (9634, 4), (9635, 5), (9636, 6), (9637, 7), (9638, 8), (9639, 9), (9657, 1), (9658, 2), (9659, 3), (9660, 4), (9661, 5), (9662, 6), (9663, 7), (9664, 8), (9665, 9), (9683, 1), (9684, 2), (9685, 3), (9686, 4), (9687, 5), (9688, 6), (9689, 7), (9690, 8), (9691, 9), (9709, 1), (9710, 2), (9711, 3), (9712, 4), (9713, 5), (9714, 6), (9715, 7), (9716, 8), (9717, 9), (9735, 1), (9736, 2), (9737, 3), (9738, 4), (9739, 5), (9740, 6), (9741, 7), (9742, 8), (9743, 9), (9761, 1), (9762, 2), (9763, 3), (9764, 4), (9765, 5), (9766, 6), (9767, 7), (9768, 8), (9769, 9), (9787, 1), (9788, 2), (9789, 3), (9790, 4), (9791, 5), (9792, 6), (9793, 7), (9794, 8), (9795, 9), (9813, 1), (9814, 2), (9815, 3), (9816, 4), (9817, 5), (9818, 6), (9819, 7), (9820, 8), (9821, 9)]



unique_firsts = [int(x[0]/26) for x in valid_output_pairs_10]
unique_firsts = sorted(list(set(unique_firsts)))
print("From chunk 10, we can have following possible z_in / 26: %s" % unique_firsts)

unique_firsts = [x[0] % 26 for x in valid_output_pairs_10]
unique_firsts = sorted(list(set(unique_firsts)))
print("From chunk 10, we can have following possible z_in %% 26: %s" % unique_firsts)


largest_from_10 = 0
for val, _ in valid_output_pairs_10:
    if val > largest_from_10:
        largest_from_10 = val

print("Largest number from 10 into 11 is %d" % largest_from_10)



# chunk_10 in == 
